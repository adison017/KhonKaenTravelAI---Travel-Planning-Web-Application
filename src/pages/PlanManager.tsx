import { useState } from "react";
import { useParams, useNavigate } from "react-router-dom";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Badge } from "@/components/ui/badge";
import { ArrowLeft, Plus, MapPin, Car, Hotel, Calendar } from "lucide-react";
import { cn } from "@/lib/utils";

interface Activity {
  title: string;
  date: string;
  timeStart: string;
  timeEnd: string;
  description: string;
  cost: number;
  type: string;
}

interface Plan {
  day: number;
  startLocation: string;
  endLocation: string;
  transportation: string;
  accommodation: string;
  stops: string[];
  activities: Activity[];
}

interface WeatherData {
  date: string;
  temp: number;
  condition: string;
  humidity: number;
  wind: number;
  forecast: string;
}

const PlanManager = () => {
  const { id } = useParams();
  const navigate = useNavigate();
  
  const [selectedDay, setSelectedDay] = useState(1);
  
  // Mock data - in real app this would come from localStorage/API
  const collection = {
    collectionId: id,
    name: "‡∏ó‡∏£‡∏¥‡∏õ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô 3 ‡∏ß‡∏±‡∏ô",
    category: "‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß",
    startDate: "2025-04-10",
    endDate: "2025-04-12",
    budget: 9000,
    weatherData: [
      {
        date: "2025-04-10",
        temp: 32,
        condition: "‡πÅ‡∏î‡∏î‡∏à‡∏±‡∏î",
        humidity: 65,
        wind: 8,
        forecast: "‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏£‡πâ‡∏≠‡∏ô ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏î‡∏∑‡πà‡∏°‡∏ô‡πâ‡∏≥‡∏ö‡πà‡∏≠‡∏¢"
      },
      {
        date: "2025-04-11",
        temp: 30,
        condition: "‡πÄ‡∏°‡∏Ü‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô",
        humidity: 70,
        wind: 6,
        forecast: "‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏î‡∏¥‡∏ô‡πÄ‡∏•‡πà‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏à‡πâ‡∏á"
      },
      {
        date: "2025-04-12",
        temp: 29,
        condition: "‡∏°‡∏µ‡∏ù‡∏ô‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢",
        humidity: 80,
        wind: 5,
        forecast: "‡∏û‡∏Å‡∏£‡πà‡∏°‡πÑ‡∏ß‡πâ‡∏î‡πâ‡∏ß‡∏¢"
      }
    ] as WeatherData[],
    plans: [
      {
        day: 1,
        startLocation: "‡∏ö‡πâ‡∏≤‡∏ô‡∏û‡∏±‡∏Å‡πÉ‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô",
        endLocation: "‡∏™‡∏ß‡∏ô‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞‡∏®‡∏£‡∏µ‡∏°‡∏´‡∏≤‡πÇ‡∏û‡∏ò‡∏¥",
        transportation: "‡∏£‡∏ñ‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß",
        accommodation: "‡∏ö‡πâ‡∏≤‡∏ô‡∏û‡∏±‡∏Å‡πÉ‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô (1,200 ‡∏ö‡∏≤‡∏ó/‡∏Ñ‡∏∑‡∏ô)",
        stops: ["‡∏´‡∏≠‡∏®‡∏¥‡∏•‡∏õ‡∏ß‡∏±‡∏í‡∏ô‡∏ò‡∏£‡∏£‡∏°‡πÅ‡∏´‡πà‡∏á‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô", "‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏´‡∏ô‡∏∑‡∏≠"],
        activities: [
          {
            title: "‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡∏ä‡∏°‡∏™‡∏ß‡∏ô‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞‡∏®‡∏£‡∏µ‡∏°‡∏´‡∏≤‡πÇ‡∏û‡∏ò‡∏¥",
            date: "2025-04-10",
            timeStart: "08:00",
            timeEnd: "10:00",
            description: "‡πÄ‡∏î‡∏¥‡∏ô‡πÄ‡∏•‡πà‡∏ô‡∏£‡∏±‡∏ö‡∏•‡∏°‡πÄ‡∏¢‡πá‡∏ô ‡∏ä‡∏°‡∏û‡∏£‡∏∞‡∏û‡∏∏‡∏ó‡∏ò‡∏£‡∏π‡∏õ‡πÉ‡∏´‡∏ç‡πà‡πÅ‡∏•‡∏∞‡∏ó‡∏∞‡πÄ‡∏•‡∏™‡∏≤‡∏ö",
            cost: 0,
            type: "‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥"
          },
          {
            title: "‡∏ó‡∏≤‡∏ô‡∏Ç‡πâ‡∏≤‡∏ß‡πÄ‡∏´‡∏ô‡∏µ‡∏¢‡∏ß‡∏´‡∏°‡∏π‡∏õ‡∏¥‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏´‡∏ô‡∏∑‡∏≠",
            date: "2025-04-10",
            timeStart: "12:30",
            timeEnd: "13:30",
            description: "‡∏Ç‡∏≠‡∏á‡∏î‡∏µ‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ô‡πâ‡∏≥‡∏ï‡∏Å‡πÅ‡∏ï‡∏á‡πÇ‡∏°‡∏™‡∏î ‚Äî ‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏£‡πà‡∏≠‡∏¢‡∏ï‡∏¥‡∏î‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö",
            cost: 80,
            type: "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡πâ‡∏≠‡∏á‡∏ñ‡∏¥‡πà‡∏ô"
          },
          {
            title: "‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡∏´‡∏≠‡∏®‡∏¥‡∏•‡∏õ‡∏ß‡∏±‡∏í‡∏ô‡∏ò‡∏£‡∏£‡∏°‡πÅ‡∏´‡πà‡∏á‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô",
            date: "2025-04-10",
            timeStart: "15:00",
            timeEnd: "17:00",
            description: "‡∏ä‡∏°‡∏á‡∏≤‡∏ô‡∏®‡∏¥‡∏•‡∏õ‡∏∞‡∏û‡∏∑‡πâ‡∏ô‡∏ö‡πâ‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏ô‡∏¥‡∏ó‡∏£‡∏£‡∏®‡∏Å‡∏≤‡∏£‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß",
            cost: 50,
            type: "‡∏ß‡∏±‡∏í‡∏ô‡∏ò‡∏£‡∏£‡∏°"
          }
        ]
      },
      {
        day: 2,
        startLocation: "‡∏ö‡πâ‡∏≤‡∏ô‡∏û‡∏±‡∏Å‡πÉ‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô",
        endLocation: "‡∏ñ‡∏ô‡∏ô‡∏Ñ‡∏ô‡πÄ‡∏î‡∏¥‡∏ô‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô",
        transportation: "‡∏£‡∏ñ‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß",
        accommodation: "‡∏ö‡πâ‡∏≤‡∏ô‡∏û‡∏±‡∏Å‡πÉ‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô (1,200 ‡∏ö‡∏≤‡∏ó/‡∏Ñ‡∏∑‡∏ô)",
        stops: [],
        activities: [
          {
            title: "‡πÄ‡∏î‡∏¥‡∏ô‡πÄ‡∏•‡πà‡∏ô‡∏ñ‡∏ô‡∏ô‡∏Ñ‡∏ô‡πÄ‡∏î‡∏¥‡∏ô‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô",
            date: "2025-04-11",
            timeStart: "17:00",
            timeEnd: "20:00",
            description: "‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏•‡∏∂‡∏Å ‡∏ó‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏¢‡πá‡∏ô‡πÅ‡∏•‡∏∞‡∏î‡∏∑‡πà‡∏°‡∏Å‡∏≤‡πÅ‡∏ü",
            cost: 200,
            type: "‡∏ä‡πâ‡∏≠‡∏õ‡∏õ‡∏¥‡πâ‡∏á"
          }
        ]
      },
      {
        day: 3,
        startLocation: "",
        endLocation: "",
        transportation: "",
        accommodation: "",
        stops: [],
        activities: []
      }
    ] as Plan[]
  };

  const currentPlan = collection.plans.find(p => p.day === selectedDay);
  const currentWeather = collection.weatherData.find(w => {
    const planDate = new Date(collection.startDate);
    planDate.setDate(planDate.getDate() + selectedDay - 1);
    return w.date === planDate.toISOString().split('T')[0];
  });

  const totalSpent = collection.plans.reduce((total, plan) => 
    total + plan.activities.reduce((dayTotal, activity) => dayTotal + activity.cost, 0), 0
  );

  const getActivityTypeIcon = (type: string) => {
    switch (type) {
      case "‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥": return "üåø";
      case "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡πâ‡∏≠‡∏á‡∏ñ‡∏¥‡πà‡∏ô": return "üçú";
      case "‡∏ß‡∏±‡∏í‡∏ô‡∏ò‡∏£‡∏£‡∏°": return "üñºÔ∏è";
      case "‡∏ä‡πâ‡∏≠‡∏õ‡∏õ‡∏¥‡πâ‡∏á": return "üõçÔ∏è";
      case "‡πÑ‡∏ô‡∏ó‡πå‡πÑ‡∏•‡∏ü‡πå": return "üåô";
      case "‡∏®‡∏≤‡∏™‡∏ô‡∏≤": return "üôè";
      default: return "üìç";
    }
  };

  const getWeatherIcon = (condition: string) => {
    if (condition.includes("‡πÅ‡∏î‡∏î")) return "‚òÄÔ∏è";
    if (condition.includes("‡∏ù‡∏ô")) return "üåßÔ∏è";
    if (condition.includes("‡πÄ‡∏°‡∏Ü")) return "üå§Ô∏è";
    return "üå§Ô∏è";
  };

  const getDayStatus = (dayNum: number) => {
    const plan = collection.plans.find(p => p.day === dayNum);
    if (!plan || plan.activities.length === 0) return "empty";
    if (dayNum === selectedDay) return "active";
    return "complete";
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case "complete": return "‚úîÔ∏è";
      case "active": return "‚ñ∂";
      case "empty": return "‚ö†Ô∏è";
      default: return "üìÖ";
    }
  };

  const formatDate = (dateStr: string, dayOffset: number) => {
    const date = new Date(dateStr);
    date.setDate(date.getDate() + dayOffset - 1);
    return date.toLocaleDateString('th-TH', { 
      day: 'numeric', 
      month: 'short', 
      year: 'numeric' 
    });
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-background via-khonkaen-secondary/30 to-khonkaen-nature/10 font-thai">
      {/* Header */}
      <header className="bg-white/95 backdrop-blur-md border-b border-border/50 sticky top-0 z-50 shadow-sm">
        <div className="container mx-auto px-4 py-4">
          <div className="flex items-center gap-3 animate-fade-in">
            <Button variant="ghost" size="sm" onClick={() => navigate('/dashboard')} className="hover:scale-105 transition-transform font-prompt">
              <ArrowLeft className="w-4 h-4" />
              ‚Üê ‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏π‡πà‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å
            </Button>
            <span className="text-3xl animate-float">üåø</span>
            <div>
              <h1 className="text-xl font-bold text-foreground font-kanit">KhonKaenTravelAI</h1>
              <p className="text-xs text-muted-foreground font-sarabun">‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß</p>
            </div>
          </div>
        </div>
      </header>

      {/* Main Layout */}
      <div className="flex w-full min-h-[calc(100vh-80px)]">
        {/* Sidebar */}
        <div className="w-60 bg-white/50 border-r border-border/50 p-4 space-y-4">
          <div className="space-y-2">
            <h3 className="font-semibold text-sm text-muted-foreground">‡∏ó‡∏£‡∏¥‡∏õ:</h3>
            <p className="font-medium text-foreground">{collection.name}</p>
          </div>

          <div className="space-y-2">
            <h4 className="font-medium text-sm text-muted-foreground">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡∏ó‡∏£‡∏¥‡∏õ</h4>
            <div className="space-y-2">
              {collection.plans.map((plan) => {
                const status = getDayStatus(plan.day);
                return (
                  <Card 
                    key={plan.day}
                    className={cn(
                      "cursor-pointer transition-all duration-200 hover:shadow-md",
                      status === "active" && "ring-2 ring-primary bg-primary/5",
                      status === "complete" && "bg-success/5 border-success/20",
                      status === "empty" && "bg-warning/5 border-warning/20"
                    )}
                    onClick={() => setSelectedDay(plan.day)}
                  >
                    <CardContent className="p-3">
                      <div className="flex items-center justify-between">
                        <div>
                          <p className="font-medium">üìÖ DAY {plan.day}</p>
                          <p className="text-xs text-muted-foreground">
                            {formatDate(collection.startDate, plan.day)}
                          </p>
                        </div>
                        <div className="text-right">
                          <span className="text-lg">{getStatusIcon(status)}</span>
                          <p className="text-xs text-muted-foreground">
                            {status === "complete" && "‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå"}
                            {status === "active" && "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥"}
                            {status === "empty" && "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÅ‡∏ú‡∏ô"}
                          </p>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                );
              })}
              
              <Button variant="hero" size="sm" className="w-full">
                <Plus className="w-4 h-4" />
                ‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏° Day‚Ä¶
              </Button>
            </div>
          </div>
        </div>

        {/* Main Panel */}
        <div className="flex-1 p-6">
          {/* Day Header */}
          <div className="mb-6">
            <div className="flex items-center justify-between mb-4">
              <h2 className="text-2xl font-bold text-foreground">
                üéØ DAY {selectedDay} ‚Äî {formatDate(collection.startDate, selectedDay)}
              </h2>
              {currentWeather && (
                <div className="flex items-center gap-2 text-sm text-muted-foreground">
                  <span>{getWeatherIcon(currentWeather.condition)}</span>
                  <span>‡∏≠‡∏≤‡∏Å‡∏≤‡∏®: {currentWeather.temp}¬∞C | {currentWeather.condition} | ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô {currentWeather.humidity}%</span>
                </div>
              )}
            </div>
          </div>

          {/* Tabs */}
          <Tabs defaultValue="places" className="w-full">
            <TabsList className="grid w-full grid-cols-4">
              <TabsTrigger value="places">‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà</TabsTrigger>
              <TabsTrigger value="transport">‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á</TabsTrigger>
              <TabsTrigger value="accommodation">‡∏ó‡∏µ‡πà‡∏û‡∏±‡∏Å</TabsTrigger>
              <TabsTrigger value="activities">‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°</TabsTrigger>
            </TabsList>

            {/* Places Tab */}
            <TabsContent value="places" className="space-y-4">
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <MapPin className="w-5 h-5" />
                    üìç ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡∏ä‡∏°‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
                  </CardTitle>
                  <CardDescription>
                    ‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏≤‡∏Å‡πÑ‡∏õ‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß ‚Äî ‡∏ô‡∏≠‡∏Å‡πÄ‡∏´‡∏ô‡∏∑‡∏≠‡∏à‡∏≤‡∏Å‡∏à‡∏∏‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°/‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î
                  </CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  {currentPlan?.stops.map((stop, index) => (
                    <div key={index} className="flex items-center justify-between p-3 bg-secondary/30 rounded-lg">
                      <div>
                        <p className="font-medium">‚ñ∂ {stop}</p>
                      </div>
                      <Button variant="destructive" size="sm">
                        ‚ûñ ‡∏•‡∏ö
                      </Button>
                    </div>
                  ))}
                  
                  <Button variant="khonkaen" className="w-full">
                    <Plus className="w-4 h-4" />
                    ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏°‡πà
                  </Button>
                </CardContent>
              </Card>
            </TabsContent>

            {/* Transport Tab */}
            <TabsContent value="transport" className="space-y-4">
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Car className="w-5 h-5" />
                    üöó ‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="grid gap-4">
                    <div>
                      <label className="text-sm font-medium">üìç ‡∏à‡∏∏‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô:</label>
                      <p className="mt-1 p-2 bg-secondary/30 rounded">{currentPlan?.startLocation || "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏∞‡∏ö‡∏∏"}</p>
                    </div>
                    <div>
                      <label className="text-sm font-medium">üìç ‡∏à‡∏∏‡∏î‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î:</label>
                      <p className="mt-1 p-2 bg-secondary/30 rounded">{currentPlan?.endLocation || "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏∞‡∏ö‡∏∏"}</p>
                    </div>
                    <div>
                      <label className="text-sm font-medium">üöó ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á:</label>
                      <p className="mt-1 p-2 bg-secondary/30 rounded">{currentPlan?.transportation || "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å"}</p>
                    </div>
                  </div>
                  
                  {currentPlan?.startLocation && currentPlan?.endLocation && (
                    <div className="p-3 bg-blue-50 rounded-lg border border-blue-200">
                      <p className="text-sm text-blue-800">
                        ‚è±Ô∏è ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì: 15 ‡∏ô‡∏≤‡∏ó‡∏µ | üìè ‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á: 3.2 ‡∏Å‡∏°.
                      </p>
                      <p className="text-sm text-blue-600 mt-1">
                        üí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏à‡∏≤‡∏Å AI: ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏•‡∏∑‡∏≠‡∏Å '‡∏£‡∏ñ‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß' ‡∏à‡∏≤‡∏Å '‡∏ö‡πâ‡∏≤‡∏ô‡∏û‡∏±‡∏Å' ‡πÑ‡∏õ '‡∏™‡∏ß‡∏ô‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞‡∏®‡∏£‡∏µ‡∏°‡∏´‡∏≤‡πÇ‡∏û‡∏ò‡∏¥' ‚Äî ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÇ‡∏î‡∏¢‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤ 15 ‡∏ô‡∏≤‡∏ó‡∏µ ‡∏ú‡πà‡∏≤‡∏ô‡∏ñ‡∏ô‡∏ô‡∏°‡∏¥‡∏ï‡∏£‡∏†‡∏≤‡∏û
                      </p>
                    </div>
                  )}
                </CardContent>
              </Card>
            </TabsContent>

            {/* Accommodation Tab */}
            <TabsContent value="accommodation" className="space-y-4">
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Hotel className="w-5 h-5" />
                    üè® ‡∏ó‡∏µ‡πà‡∏û‡∏±‡∏Å‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    <div>
                      <label className="text-sm font-medium">‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏û‡∏±‡∏Å:</label>
                      <p className="mt-1 p-2 bg-secondary/30 rounded">{currentPlan?.accommodation || "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏∞‡∏ö‡∏∏"}</p>
                    </div>
                    
                    <div className="p-3 bg-blue-50 rounded-lg border border-blue-200">
                      <p className="text-sm text-blue-800">
                        üí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: ‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏û‡∏±‡∏Å‡πÉ‡∏ô‡πÄ‡∏Ç‡∏ï‡∏ï‡∏±‡∏ß‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏à‡∏∞‡∏™‡∏∞‡∏î‡∏ß‡∏Å‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á
                      </p>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </TabsContent>

            {/* Activities Tab */}
            <TabsContent value="activities" className="space-y-4">
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Calendar className="w-5 h-5" />
                    üìå ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ ({currentPlan?.activities.length || 0} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  {currentPlan?.activities.map((activity, index) => (
                    <div key={index} className="p-4 bg-secondary/30 rounded-lg border border-border/30">
                      <div className="flex items-center justify-between mb-2">
                        <h4 className="font-medium">‚ñ∂ {activity.title}</h4>
                        <Button variant="destructive" size="sm">
                          ‚ûñ ‡∏•‡∏ö
                        </Button>
                      </div>
                      <div className="flex items-center gap-4 text-sm text-muted-foreground mb-2">
                        <span>üïê {activity.timeStart}‚Äì{activity.timeEnd}</span>
                        <span>üí∞ {activity.cost} ‡∏ö‡∏≤‡∏ó</span>
                        <Badge variant="secondary">
                          {getActivityTypeIcon(activity.type)} {activity.type}
                        </Badge>
                      </div>
                      <p className="text-sm text-muted-foreground">
                        ‚ÑπÔ∏è {activity.description}
                      </p>
                    </div>
                  ))}
                  
                  <Button variant="hero" className="w-full">
                    <Plus className="w-4 h-4" />
                    ‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÉ‡∏´‡∏°‡πà
                  </Button>
                </CardContent>
              </Card>
            </TabsContent>
          </Tabs>

          {/* Budget Summary */}
          <Card className="mt-6">
            <CardContent className="pt-6">
              <div className="flex items-center justify-between">
                <span className="text-sm text-muted-foreground">
                  üí∞ ‡∏á‡∏ö‡∏£‡∏ß‡∏°: {collection.budget.toLocaleString()} ‡∏ö‡∏≤‡∏ó | ‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß: {totalSpent} ‡∏ö‡∏≤‡∏ó | ‡πÄ‡∏´‡∏•‡∏∑‡∏≠: {(collection.budget - totalSpent).toLocaleString()} ‡∏ö‡∏≤‡∏ó
                </span>
                <Badge variant={totalSpent > collection.budget ? "destructive" : "secondary"}>
                  {totalSpent > collection.budget ? "‡πÄ‡∏Å‡∏¥‡∏ô‡∏á‡∏ö!" : "‡∏á‡∏ö‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô ‚Äî ‡∏¢‡∏±‡∏á‡∏°‡∏µ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÑ‡∏î‡πâ‡∏≠‡∏µ‡∏Å!"}
                </Badge>
              </div>
            </CardContent>
          </Card>

          {/* Weather Card */}
          {currentWeather && (
            <Card className="mt-4">
              <CardContent className="pt-6">
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-4">
                    <span className="text-2xl">{getWeatherIcon(currentWeather.condition)}</span>
                    <div>
                      <p className="font-medium">üå§Ô∏è ‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ</p>
                      <p className="text-sm text-muted-foreground">
                        {currentWeather.condition} | üå°Ô∏è {currentWeather.temp}¬∞C | üíß {currentWeather.humidity}% | üí® {currentWeather.wind} km/h
                      </p>
                    </div>
                  </div>
                  <div className="text-right">
                    <p className="text-sm text-muted-foreground">üìÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: 09:15 ‡∏ô.</p>
                    <p className="text-sm font-medium text-foreground">{currentWeather.forecast}</p>
                  </div>
                </div>
              </CardContent>
            </Card>
          )}
        </div>
      </div>
    </div>
  );
};

export default PlanManager;